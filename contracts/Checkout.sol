pragma solidity ^0.4.11;

import "./DINRegistry.sol";
import "./Orders.sol";
import "./Rewards.sol";
import "zeppelin-solidity/contracts/math/SafeMath.sol";

contract Checkout {
    using SafeMath for uint256;

    DINRegistry public registry;
    Orders public orders;
    Rewards public rewards;

    // Prevent Solidity "stack too deep" error.
    struct Order {
        uint256 DIN;
        uint256 quantity;
        uint256 totalPrice;
        uint256 priceValidUntil;
        uint256 affiliateReward;
        address affiliate;
        uint256 loyaltyReward;
        address loyaltyToken;
        address merchant;
        address owner;
    }

    // Log Solidity errors
    event LogError(string error);

    // Log new orders
    event NewOrder(uint256 indexed orderID);

    /** @dev Constructor.
      * @param _registry The DIN Registry contract address.
      * @param _orders The Orders contract address.
      * @param _rewards The Rewards contract address.
      */
    function Checkout(
        DINRegistry _registry,
        Orders _orders,
        Rewards _rewards
    ) public {
        registry = _registry;
        orders = _orders;
        rewards = _rewards;
    }

    /** @dev Buy a product.
      * param orderValues:
        [0] DIN The Decentralized Identification Number (DIN) of the product to buy.
        [1] quantity The quantity to buy.
        [2] totalPrice Total price of the purchase, in wei.
        [3] priceValidUntil Expiration time (Unix timestamp).
        [4] affiliateReward Affiliate reward (optional), denominated in base units of Market Token (MARK).
        [5] loyaltyReward Loyalty reward (optional), denominated in loyaltyToken.
      * param orderAddresses:
        [0] merchant Address of the merchant to pay.
        [1] affiliate Address of the affiliate. Use null address (0x0...) for no affiliate.
        [2] loyaltyToken Address of the Loyalty Token. Use null address for no loyalty reward.
      * @param nonceHash The hash of a nonce generated by a client. The nonce can be used as a proof of purchase.
      * @param v ECDSA signature parameter v.
      * @param r ECDSA signature parameter r.
      * @param s ECDSA signature parameter s.
      * @return orderID A unique ID for the order.
      */
    function buy(
        uint256[6] orderValues,
        address[3] orderAddresses,
        bytes32 nonceHash,
        uint8 v,
        bytes32 r,
        bytes32 s
    )
        payable
        public
        returns (uint256)
    {
        address merchant = orderAddresses[0];

        Order memory order = Order({
            DIN: orderValues[0],
            quantity: orderValues[1],
            totalPrice: orderValues[2],
            priceValidUntil: orderValues[3],
            affiliateReward: orderValues[4],
            affiliate: orderAddresses[1],
            loyaltyReward: orderValues[5],
            loyaltyToken: orderAddresses[2],
            merchant: merchant,
            owner: registry.owner(orderValues[0]) // Get the DIN owner address from the DIN registry.
        });

        if (isValidOrder(order, v, r, s) == false) {
            // Return Ether to buyer.
            msg.sender.transfer(msg.value);
            return 0;
        }

        // Transfer a mix of Ether and loyalty tokens (if applicable) from buyer to merchant.
        payMerchant(merchant, order.totalPrice, order.loyaltyToken);

        // Transfer affiliate reward from DIN owner to affiliate.
        if (order.affiliateReward > 0 && order.affiliate != address(0x0)) {
            rewards.sendAffiliateReward(order.owner, order.affiliate, order.affiliateReward);
        }

        // Transfer loyalty reward from DIN owner to buyer.
        if (order.loyaltyReward > 0 && order.loyaltyToken != address(0x0)) {
            rewards.sendLoyaltyReward(order.loyaltyToken, order.owner, msg.sender, order.loyaltyReward);
        }

        // Create a new order
        uint256 orderID = orders.createOrder(
            nonceHash,
            msg.sender, // Buyer
            merchant,
            order.DIN,
            order.quantity,
            order.totalPrice
        );

        // Log and return the unique order ID.
        NewOrder(orderID);
        return orderID;
    }

    /**
      * @dev Transfer a mix of Ether and loyalty token from buyer to merchant.
      * @param merchant The merchant address.
      * @param totalPrice The total price of the purchase, in wei.
      * @param loyaltyToken The address of the loyalty token specified by the DIN owner.
      */
    function payMerchant(address merchant, uint256 totalPrice, address loyaltyToken) private {
        // Transfer Ether from buyer to merchant.
        merchant.transfer(msg.value);

        // Calculate the remaining balance.
        uint256 remainingValue = totalPrice.sub(msg.value);

        // Transfer loyalty tokens from buyer to merchant if the total price was not paid in Ether.
        if (remainingValue > 0) {
            rewards.redeemLoyaltyTokens(loyaltyToken, msg.sender, remainingValue);
        }
    }

    /**
      * @dev Verify that an order is valid.
      * @return valid Validity of the order.
      */
    function isValidOrder(Order order, uint8 v, bytes32 r, bytes32 s) internal constant returns (bool) {
        if (block.timestamp > order.priceValidUntil) {
            LogError("Offer expired");
            return false;
        }

        if (order.merchant == address(0x0)) {
            LogError("Invalid merchant");
            return false;
        }

        if (order.affiliateReward > 0 && order.affiliate == msg.sender) {
            LogError("Invalid affiliate");
            return false;
        }

        if (msg.value > order.totalPrice) {
            LogError("Invalid price");
            return false;
        }

        uint256 unitPrice = order.totalPrice / order.quantity;

        // Calculate the hash of the parameters provided by the buyer.
        bytes32 hash = keccak256(
            order.DIN,
            unitPrice,
            order.priceValidUntil,
            order.merchant,
            order.affiliateReward,
            order.loyaltyReward,
            order.loyaltyToken
        );

        // Verify that the DIN owner has signed the provided inputs.
        if (isValidSignature(order.owner, hash, v, r, s) == false) {
            LogError("Invalid signature");
            return false;
        }

        return true;
    }

    /**
      * @dev Verify that an order signature is valid.
      * @param signer address of signer.
      * @param hash Signed Keccak-256 hash.
      * @param v ECDSA signature parameter v.
      * @param r ECDSA signature parameters r.
      * @param s ECDSA signature parameters s.
      * @return valid Validity of the order signature.
      */
    function isValidSignature(
        address signer,
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    )
        public
        constant
        returns (bool valid)
    {
        return signer == ecrecover(
            keccak256("\x19Ethereum Signed Message:\n32", hash),
            v,
            r,
            s
        );
    }

}